name: pull-request-validation

on:
  pull_request:
    branches:
      - "*"

jobs:
  lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js and NPM
        uses: actions/setup-node@v4
        with:
          node-version: "14"

      - name: Install commitlint
        run: npm install -g @commitlint/cli@11.0.0 @commitlint/config-conventional@11.0.0

      - name: Run commitlint
        run: commitlint -x @commitlint/config-conventional --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}

  test:
    name: Build and Test using Swift 5.9
    runs-on: macos-14
    env:
      MOCKABLE_TEST: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode 15.2 (Swift 5.9.2)
        run: |
          sudo xcode-select -s /Applications/Xcode_15.2.app
          swift -version

      - name: Run Tests
        run: |
          Scripts/test.sh

  test-swift6:
    name: Build and Test using Swift 6
    runs-on: macos-14
    env:
      MOCKABLE_LINT: true
      MOCKABLE_TEST: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode 16 (Swift 6.0)
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          swift --version

      - name: Run Tests
        run: |
          Scripts/lint.sh & Scripts/test.sh

  test-macos15:
    name: Build and Test on macOS 15
    runs-on: macos-15
    env:
      MOCKABLE_LINT: true
      MOCKABLE_TEST: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show available Xcode versions
        run: |
          ls -la /Applications | grep Xcode || true
          
      - name: Select latest Xcode
        run: |
          # List available Xcode versions and select the latest
          LATEST_XCODE=$(ls -1 /Applications | grep -E "^Xcode_[0-9]+\.[0-9]+\.app$|^Xcode\.app$" | sort -V | tail -1)
          echo "Latest Xcode found: $LATEST_XCODE"
          sudo xcode-select -s /Applications/$LATEST_XCODE
          xcodebuild -version
          swift --version

      - name: Run Tests
        run: |
          Scripts/lint.sh & Scripts/test.sh

  test-xcode26-beta:
    name: Build and Test with Xcode 26 Beta
    runs-on: macos-latest
    env:
      MOCKABLE_LINT: true
      MOCKABLE_TEST: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode 26 Beta
        run: |
          # Attempt to select Xcode 26 beta
          sudo xcode-select -s /Applications/Xcode_26.0.app || sudo xcode-select -s /Applications/Xcode-beta.app || true
          xcodebuild -version
          swift --version

      - name: Run Tests
        run: |
          Scripts/lint.sh & Scripts/test.sh
        continue-on-error: true  # Allow this job to fail without failing the entire workflow

  test-linux:
    name: Build and Test on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift: ["6", "6.1"] # Test with both Swift 6.0 and 6.1
    env:
      MOCKABLE_TEST: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift }}
      - name: Run Tests
        run: |
          Scripts/test.sh
